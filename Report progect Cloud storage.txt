Проект «Сloud storage» содержить 3 модуля:

-----

1 – Common. Классы модуля: (Logger, Commands (server - client), FileManager)

 	* Класс FileManager – (Копировать,  Удалить,  Создать, Архивировать,  Разархивировать, 
   	Вернуть все файлы директории, Up-Down текущей директории и проч);


-----


2 – Client. Классы модуля :

 @ ManagerBox - абстрактный класс графического интерфейса пользователя (GUI);

  	* Класс  UserBox  (наследуется от ManagerBox) – GUI для работы с файлами на ПК (реализует методы класса  Common.FileManager);

 	 * Класс CloudBox (наследуется от ManagerBox) - GUI для работы с файлами на сервере (посредством отправки команд через класс Connector);

 	  ** Класс Connector – имеет набор условий (обрабатывает сообщения от сервера и обновляет данные CloudBox), а также направляет команды на сервер от CloudBox;

 	  ** Класс TransportList – служит для передачи на сервер и загрузки файлов на сервер (хранит историю загрузок) формируется из класса TransportFile;
	
   	 	*** Класс TransportFile – содержит поля:
   		  - SizeFile
		  - NameFile 
    		  - PathUpload (относительно директории клиента на сервере)
   	 	  - PathDirs (При передаче директории) 
  	 	  - delete (удаление после передачи) 
  	 	  - Id клиента (Для идентификации, так как передача или загрузка выполняются в отдельном потоке «со своим socket»)

	     	     **** Класс UploadFiles 
			(Работает в отдельном потоке и в цикле while) 
			Принимает TransportList --> устанавливает соединение с сервером 

    		   	(в цикле) 
			Передача значений TransportFile --> Передача массива байтов --> Передача значений TransportFile --> Передача массива байтов и т.д (В зависимости от размера TransportList )) 
      	
         	        Проверка на формирование нового TransportList 
          	        (При наличие цикл повторяется) 
                        (При отсутствии цикл завершается, соединение разрывается).
 

   		     **** Класс DowloadFiles 
			(Работает в отдельном потоке и в цикле while) --> принимает TransportList ----> устанавливает соединение с сервером  –-> Передача TransportList -->  Прием int (numFiles) кол-во файлов
	
			(в цикле) 	
 			прием значений TransportFile ---> прием массива байтов  ---> прием значений TransportFile ---> прием массива байтов  ---> т.д  
                        
			Проверка на формирование нового TransportList
          	        (При наличие цикл повторяется) 
                        (При отсутствии цикл завершается, соединение разрывается).
	
	Классы UserBox и CloudBox имею общие классы:

	** Класс ListFiles – файлы текущей директории (состоит из класса FileInfo)
		*** Класс FileInfo - (Name, Path, Type, Size, Modification date);

	** Класс Navigation – навигация по директориям;

	** Класс MenuOption – меню операций с файлами;

	** Класс DemoFile – просмотр файла (Текстовый файл, Изображение, Видео);

 По факту классы UserBox и CloudBox имеют одинаковый функционал;

	* UserBox (На прямую реализует методы) ---> (Common) FileManager
	*  CloudBox ---> Connector ---> Server ---> Handler --->  Client --->  (Common) FileManager

 Класс MainBox может включать в себя неограниченное количество классов UserBox и CloudBox.
 (Пользователь имеет возможность открыть дополнительную вкладку). Для корректного взаимодействия между Boxes служит класс FileBuffer.

	*  Класс FileBuffer в зависимости от действий пользователя выполняет (move, copy, delete, upload, download) выделенных пользователем файлов.



-----


3 – Server. Классы модуля :

* Класс Server – ожидает подключения socket.

* Класс Handler – обрабатывает сообщения и вызывает методы класса  Client.

* Класс Client – содержит всю информации о подключенном клиенте (id, port, ip, curDir, name, текущий размер и проч). Принимает массив сообщений от Handler и реализует методы  (Common) FileManager. 

* Клаcс Clients -  работает с DataBase для идентификации клиента

* Классы TransportList, TransportFile работают в том же тандеме. 

* Классы UploadFiles, DowloadFiles работают по обратному принципу классов (UploadFiles, DowloadFiles на клиенте).


-----

(Server - Client) 
Обмениваются объектами передавая UTF сообщения (java.io). 
Объект имеет конструктор принимающий String. (In msg --> field ... = (Obgect) msg[..]).
Передача файлов byte[] (java.io).


-----


Функционал:
1. Копировать файл (файлы) / директорию (директории) .
2. Удалить файл (файлы) / директорию (директории) .
3. Список фалов (Расширение, Сортировка, Выделить файлы (директории)).
4. Функционал пользователя (Авторизация,  Личная папка / общая папка / admin) .
5. Переименовать файл (директорию) .
6. Скачать  / загрузить файл (файлы) / директорию (директории) .
7. Создать файл (директорию) .
8. Поиск файлов (директорий) .
9. Архивация / Разархивация файлов (директорий) .
10. Защита от случайного удаления.
11. Фиксированный размер диска (Изменение размера) .
12. Передача файлов (директорий) другому пользователю по Nikname.
13. Предварительный просмотр файла текст (изменение кодировки при просмотре), изображение, видео .
14. Добавление вкладок графического интерфейса.


Все что было реализовано. Пока сенсей по ООП был в отпуске )


P.S. Необходимо поработать над «оболочкой» клиента, подключить БД и «куча мелочевки»



